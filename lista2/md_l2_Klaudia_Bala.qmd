---
title: "Lista 2"
author: "Klaudia Bała"
format: pdf
jupyter: python3
editor: visual
---

# Zadanie 1

Mamy następujący układ równań zwyczajnych:
\begin{equation}
\begin{cases}
  v'=v-\frac{v^3}{3}-w+RI_{ext}  \\
  \tau w'=v+a-bw \\
  v(0)=v_0, w(0)=w_0.
\end{cases}
\end{equation}

Przyjmujemy następujące wartości parametrów:
$a=0.7, \,\, \tau=12.5, \,\, R=0.1, \,\, b=1.2$ oraz $I_{ext} \in \{0,5,10\}.$

Na początek drugie równanie naszego układu podzielimy przez $\tau$, by mieć tradycyjną formę każdego równania w naszym układzie. Zatem teraz otrzymujemy:

\begin{equation}
\begin{cases}
  v'=v-\frac{v^3}{3}-w+RI_{ext}  \\
  w'=\frac{v}{\tau}+\frac{a}{\tau}-\frac{bw}{\tau} \\
  v(0)=v_0, w(0)=w_0.
\end{cases}
\end{equation}

## (1.1)

Teraz wyznaczymy równania opisujące nullcline-y. Pierwsze równanie wyznaczymy z zależności $v'=0$: $$0=v-\frac{v^3}{3}-w+RI_{ext} \Rightarrow w=-\frac{v^3}{3}+v+RI_{ext}$$
Dodatkowo wstawiając poszczególne wartości parametrów otrzymujemy:

\begin{equation}
w=
\begin{cases}
  -\frac{v^3}{3}+v \,\, dla \,\, I_{ext}=0 \\
  -\frac{v^3}{3}+v + \frac{1}{2} \,\, dla \,\, I_{ext}=5  \\
  -\frac{v^3}{3}+v+1 \,\, dla \,\, I_{ext}=10 .
\end{cases}
\end{equation}

Równanie opisujące drugiego nullcline-a wyznaczymy z zależności $w'=0$:
$$0=\frac{v}{\tau}+\frac{a}{\tau}-\frac{bw}{\tau} \Rightarrow \frac{bw}{\tau}=\frac{v}{\tau}+\frac{a}{\tau} \Rightarrow w=\frac{v}{b}+\frac{a}{b}.$$
Wstawiając poszczególne wartości parametrów otrzymujemy:
$$w=\frac{5}{6}v+\frac{7}{12}.$$

## (1.2)

Teraz wyznaczymy stany stacjonarne równania, czyli poszukamy takiego $(v,w)$ by spełniona była zależność $(v',w')=(0,0)$. Szukamy zatem rozwiązań następującego równania:
$$-\frac{v^3}{3}+v+RI_{ext}=\frac{v}{b}+\frac{a}{b} \Rightarrow \frac{v^3}{3}+v(\frac{1}{b}-1)+\frac{a}{b}-RI_{ext}=0 \Rightarrow v^3+v(\frac{3}{b}-3)+\frac{3a}{b}-3RI_{ext}=0$$

### Dla $I_{ext}=0$

Po wstawieniu konkretnych wartości parametrów dostajemy:
$$v^3-\frac{1}{2}v+\frac{7}{4}=0$$
Niech $p=-\frac{1}{2}$ i $q=\frac{7}{4}$, czyli odpowiednie współczynniki z równania powyżej. Wtedy:

$$\Delta= \left( \frac{p}{3} \right)^3+ \left( \frac{q}{2} \right)^2=
\left( \frac{-\frac{1}{2}}{3} \right)^3+ \left( \frac{\frac{7}{4}}{2} \right)^2=\frac{1315}{1728}>0,$$
czyli mamy jedno rozwiązanie rzeczywiste.
$$v_1 = \sqrt[3]{-\frac{q}{2}-\sqrt{\Delta}}+ \sqrt[3]{-\frac{q}{2}+\sqrt{\Delta}}=
\sqrt[3]{-\frac{\frac{7}{4}}{2}-\sqrt{\frac{1315}{1728}}}+ \sqrt[3]{-\frac{\frac{7}{4}}{2}+\sqrt{\frac{1315}{1728}}} \approx -1.3428$$
$$w_1=\frac{5}{6}v_1+\frac{7}{12} \approx -0.5357$$

### Dla $I_{ext}=5$

Po wstawieniu konkretnych wartości parametrów dostajemy:
$$v^3-\frac{1}{2}v+\frac{1}{4}=0$$
Niech $p=-\frac{1}{2}$ i $q=\frac{1}{4}$, czyli odpowiednie współczynniki z równania powyżej. Wtedy:

$$\Delta= \left( \frac{p}{3} \right)^3+ \left( \frac{q}{2} \right)^2=
\left( \frac{-\frac{1}{2}}{3} \right)^3+ \left( \frac{\frac{1}{4}}{2} \right)^2=\frac{19}{1728}>0,$$
czyli mamy jedno rozwiązanie rzeczywiste.
$$v_2 = \sqrt[3]{-\frac{q}{2}-\sqrt{\Delta}}+ \sqrt[3]{-\frac{q}{2}+\sqrt{\Delta}}=
\sqrt[3]{-\frac{\frac{1}{4}}{2}-\sqrt{\frac{19}{1728}}}+ \sqrt[3]{-\frac{\frac{1}{4}}{2}+\sqrt{\frac{19}{1728}}} \approx -0.8846$$
$$w_2=\frac{5}{6}v_2+\frac{7}{12} \approx -0.1539$$

### Dla $I_{ext}=10$

Po wstawieniu konkretnych wartości parametrów dostajemy:
$$v^3-\frac{1}{2}v-\frac{5}{4}=0$$
Niech $p=-\frac{1}{2}$ i $q=-\frac{5}{4}$, czyli odpowiednie współczynniki z równania powyżej. Wtedy:

$$\Delta= \left( \frac{p}{3} \right)^3+ \left( \frac{q}{2} \right)^2=
\left( \frac{-\frac{1}{2}}{3} \right)^3+ \left( \frac{-\frac{5}{4}}{2} \right)^2=\frac{667}{1728}>0,$$
czyli mamy jedno rozwiązanie rzeczywiste.
$$v_3 = \sqrt[3]{-\frac{q}{2}-\sqrt{\Delta}}+ \sqrt[3]{-\frac{q}{2}+\sqrt{\Delta}}=
\sqrt[3]{-\frac{-\frac{5}{4}}{2}-\sqrt{\frac{667}{1728}}}+ \sqrt[3]{-\frac{-\frac{5}{4}}{2}+\sqrt{\frac{667}{1728}}} \approx 1.2310 $$
$$w_3=\frac{5}{6}v_3+\frac{7}{12} \approx 1.6092$$

## (1.3)

Następnie narysujemy portrety fazowe dla poszczególnych wartości $I_{ext}$ oraz zaznaczymy na nich nullcline-y i stany stacjonarne.

```{python}
#|echo: false
import numpy as np
import matplotlib.pyplot as plt
import sympy as sp


def wsp_k(fun, wsp, h):
    n_dim = max(fun(wsp).shape)
    mat_k = np.ndarray(shape=(4, n_dim))
    k1 = fun(wsp)
    k2 = fun(wsp+h/2*k1)
    k3 = fun(wsp+h/2*k2)
    k4 = fun(wsp+h*k3)
    mat_k[0, ], mat_k[1, ], mat_k[2, ], mat_k[3, ] = k1, k2, k3, k4
    return mat_k


def point_to_plot(fun, wsp_st, h, T):
    n_dim = max(fun(wsp_st).shape)
    n = int(T / h)
    mat_point = np.ndarray(shape=(n_dim, n + 1))

    mat_point[:, 0] = wsp_st
    ts = [0]
    for i in range(n):
        ts.append(ts[i] + h)
        ak_wsp = mat_point[:, i]
        k = wsp_k(fun, ak_wsp, h)
        point = ak_wsp + h / 6 * (k[0, ] + 2 * k[1, ] + 2 * k[2, ] + k[3, ])
        mat_point[:, i + 1] = point

    ts = np.array(ts)
    mat_point = np.append(mat_point, [ts], axis=0)

    return mat_point


T_v = 100
h_v = 0.1
a = 0.7
tau = 12.5
R = 0.1
b = 1.2
l_I_ext = [0, 5, 10]
v_0 = -1
w_0 = 1
start = [v_0, w_0]


def f1(wsp):
    v, w = wsp
    value1 = np.array([v-v**3/3-w+R*l_I_ext[0], v/tau + a/tau - b*w/tau])
    return value1


def f2(wsp):
    v, w = wsp
    value2 = np.array([v-v**3/3-w+R*l_I_ext[1], v/tau + a/tau - b*w/tau])
    return value2


def f3(wsp):
    v, w = wsp
    value3 = np.array([v-v**3/3-w+R*l_I_ext[2], v/tau + a/tau - b*w/tau])
    return value3


dane_do_wyk1 = point_to_plot(f1, start, h_v, T_v)
dane_do_wyk2 = point_to_plot(f2, start, h_v, T_v)
dane_do_wyk3 = point_to_plot(f3, start, h_v, T_v)


# funkcje do nullcline
def nullcline_cubic(k, n_i):
    return -k**3/3+k+R*l_I_ext[n_i]


def nullcline_linear(k):
    return 5/6*k+7/12


def stany_stacjonarne(p,q):
    ps, qs = sp.symbols('ps, qs')
    delta = (ps/3)**3 + (qs/2)**2
    u_p = -qs/2-sp.sqrt(delta)
    v_p = -qs / 2 + sp.sqrt(delta)
    #print(type(u_p.subs({ps: p, qs: q}).evalf()))
    #print("u")
    #print(u_p.subs({ps: p, qs: q}).evalf())

    if (u_p.subs({ps: p, qs: q}).evalf() < 0):
        u_p = -u_p
        u_p = -sp.root(u_p,3)
    else:
        u_p = sp.root(u_p,3)

    #print(type(v_p.subs({ps: p, qs: q}).evalf()))
    #print("v")
    #print(v_p.subs({ps: p, qs: q}).evalf())

    if v_p.subs({ps: p, qs: q}).evalf()<0:
        v_p = -v_p
        v_p = -sp.root(v_p,3)
    else:
        v_p = sp.root(v_p,3)
    v1 = u_p + v_p
    w1 = v1 * 5 / 6 + sp.Rational(7, 12)
    return [v1.subs({ps: p, qs: q}).evalf(), w1.subs({ps: p, qs: q}).evalf()]


# dla I_ext=0
st_st1 = stany_stacjonarne(sp.Rational(-1,2), sp.Rational(7,4))


# dla I_ext=5
st_st2 = stany_stacjonarne(sp.Rational(-1,2), sp.Rational(1,4))


# dla I_ext=10
st_st3 = stany_stacjonarne(sp.Rational(-1,2), sp.Rational(-5,4))


# Definiowanie funkcji
f11 = lambda x, y: x-x**3/3-y+R*l_I_ext[0]  # pochodna x
g11 = lambda x, y: x/tau + a/tau - b*y/tau  # pochodna y

f22 = lambda x, y: x-x**3/3-y+R*l_I_ext[1]  # pochodna x
g22 = lambda x, y: x/tau + a/tau - b*y/tau  # pochodna y

f33 = lambda x, y: x-x**3/3-y+R*l_I_ext[2]  # pochodna x
g33 = lambda x, y: x/tau + a/tau - b*y/tau  # pochodna y

# Tworzenie siatki
x = np.arange(-3, 3, .1)
y = np.arange(-3, 3, .1)
x_grid, y_grid = np.meshgrid(x, y)

# Obliczanie wektorów (pochodnych) w każdym punkcie siatki
x_prime1 = f11(x_grid, y_grid)  # pochodna względem x
y_prime1 = g11(x_grid, y_grid)  # pochodna względem y

x_prime2 = f22(x_grid, y_grid)  # pochodna względem x
y_prime2 = g22(x_grid, y_grid)  # pochodna względem y

x_prime3 = f33(x_grid, y_grid)  # pochodna względem x
y_prime3 = g33(x_grid, y_grid)  # pochodna względem y

# Obliczanie długości wektora (norma) dla kolorowania strzałek
m1 = np.hypot(x_prime1, y_prime1)  # długość wektora

m2 = np.hypot(x_prime2, y_prime2)

m3 = np.hypot(x_prime3, y_prime3)

```

```{python}
#|echo: false
# Rysowanie wykresów quiver
# dla i_ext=0
fig, ax = plt.subplots(1, 3, figsize=(15, 5))
cnt = 0
scale = 50

ax[cnt].quiver(x_grid, y_grid, x_prime1, y_prime1, m1, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[cnt].set_title(f'Portret fazowy dla I_ext=0')
ax[cnt].set_aspect('equal')
ax[cnt].set_ylim([-2, 2])
ax[cnt].set_xlim([-3, 3])
ax[cnt].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[cnt].plot(np.arange(-3, 3, .1), [nullcline_cubic(v,0) for v in np.arange(-3, 3, .1)], color="green")
ax[cnt].scatter(st_st1[0], st_st1[1], color='red', label='Stan stacjonarny')

# dla i_ext=5
cnt += 1
ax[cnt].quiver(x_grid, y_grid, x_prime2, y_prime2, m2, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[cnt].set_title(f'Portret fazowy dla I_ext=5')
ax[cnt].set_aspect('equal')
ax[cnt].set_ylim([-2, 2])
ax[cnt].set_xlim([-3, 3])
ax[cnt].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[cnt].plot(np.arange(-3, 3, .1), [nullcline_cubic(v,1) for v in np.arange(-3, 3, .1)], color="green")
ax[cnt].scatter(st_st2[0], st_st2[1], color='red', label='Stan stacjonarny')


# dla i_ext=10
cnt += 1
ax[cnt].quiver(x_grid, y_grid, x_prime3, y_prime3, m3, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[cnt].set_title(f'Portret fazowy dla I_ext=10')
ax[cnt].set_aspect('equal')
ax[cnt].set_ylim([-2, 2])
ax[cnt].set_xlim([-3, 3])
ax[cnt].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[cnt].plot(np.arange(-3, 3, .05), [nullcline_cubic(v, 2) for v in np.arange(-3, 3, .05)], color="green")
ax[cnt].scatter(st_st3[0], st_st3[1], color='red', label='Stan stacjonarny')

cnt += 1
plt.show()
```

Na wykresach powyżej kropkami czerwonymi są zaznaczone stany stacjonarne, a zieloną i czerwoną krzywą nullcline-y. Jak widać na wykresach nullcline-y przecinają się w punktach stacjonarnych. A raczej powinniśmy to sformułować jako miejsca przecinania się nullcline-ów wyznaczają stany stacjonarne.

## (1.4)

Teraz wykonamy symulacje dla warunku początkowego $(v_0,w_0)=(-1,1)$ korzystając ze schematu RK4. Nasze rozwiązania nałożymy na odpowiadające im portrety fazowe (kolorem czarnym), jak i narysujemy je na osobnym wykresie w zależności od czasu (czerwonym kolorem przedstawimy wykres $w(t)$, a niebieskim $v(t)$).

```{python}
#|echo: false
# Rysowanie wykresów quiver
# dla i_ext=0
fig, ax = plt.subplots(2, 3, figsize=(15, 10))
cnt = 0
scale = 50

ax[cnt, 0].quiver(x_grid, y_grid, x_prime1, y_prime1, m1, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[cnt, 0].set_title(f'Portret fazowy dla I_ext=0')
ax[cnt, 0].set_aspect('equal')
ax[cnt, 0].set_ylim([-2, 2])
ax[cnt, 0].set_xlim([-3, 3])
ax[cnt, 0].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[cnt, 0].plot(np.arange(-3, 3, .1), [nullcline_cubic(v,0) for v in np.arange(-3, 3, .1)], color="green")
ax[cnt, 0].plot(dane_do_wyk1[0, ], dane_do_wyk1[1, ], color="black")
ax[cnt, 0].scatter(st_st1[0], st_st1[1], color='red', label='Stan stacjonarny')

ax[1, 0].plot(dane_do_wyk1[2, ], dane_do_wyk1[0, ], color="blue")
ax[1, 0].plot(dane_do_wyk1[2, ], dane_do_wyk1[1, ], color="red")
ax[1, 0].set_title("Wykres rozwiązań w zależności od czasu \n dla I_ext=0")

# dla i_ext=5
cnt += 1
ax[0, cnt].quiver(x_grid, y_grid, x_prime2, y_prime2, m2, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[0, cnt].set_title(f'Portret fazowy dla I_ext=5')
ax[0, cnt].set_aspect('equal')
ax[0, cnt].set_ylim([-2, 2])
ax[0, cnt].set_xlim([-3, 3])
ax[0, cnt].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[0, cnt].plot(np.arange(-3, 3, .1), [nullcline_cubic(v,1) for v in np.arange(-3, 3, .1)], color="green")
ax[0, cnt].plot(dane_do_wyk2[0, ], dane_do_wyk2[1, ], color="black")
ax[0, cnt].scatter(st_st2[0], st_st2[1], color='red', label='Stan stacjonarny')

# Drugi wykres
ax[1, cnt].plot(dane_do_wyk2[2, ], dane_do_wyk2[0, ], color="blue")
ax[1, cnt].plot(dane_do_wyk2[2, ], dane_do_wyk2[1, ], color="red")
ax[1, cnt].set_title("Wykres rozwiązań w zależności od czasu \n dla I_ext=5")


# dla i_ext=10
cnt += 1
ax[0, cnt].quiver(x_grid, y_grid, x_prime3, y_prime3, m3, pivot="tip", scale=scale, cmap=plt.cm.jet)
ax[0, cnt].set_title(f'Portret fazowy dla I_ext=10')
ax[0, cnt].set_aspect('equal')
ax[0, cnt].set_ylim([-2, 2])
ax[0, cnt].set_xlim([-3, 3])
ax[0, cnt].plot([-3, 3], [nullcline_linear(-3), nullcline_linear(3)], color="red")
ax[0, cnt].plot(np.arange(-3, 3, .05), [nullcline_cubic(v, 2) for v in np.arange(-3, 3, .05)], color="green")
ax[0, cnt].plot(dane_do_wyk3[0, ], dane_do_wyk3[1, ], color="black")
ax[0, cnt].scatter(st_st3[0], st_st3[1], color='red', label='Stan stacjonarny')

# trzeci wykres
ax[1, cnt].plot(dane_do_wyk3[2, ], dane_do_wyk3[0, ], color="blue")
ax[1, cnt].plot(dane_do_wyk3[2, ], dane_do_wyk3[1, ], color="red")
ax[1, cnt].set_title("Wykres rozwiązań w zależności od czasu \n dla I_ext=10")

cnt += 1
#plt.tight_layout()
plt.show()
```

## (1.5)

Teraz spróbujemy porównać te wykresy. Na początek przyjrzyjmy się portretom fazowym z nałożonymi rozwiązaniami, nullcline-ami i stanami stacjonarnymi. Zauważmy, że dla $I_{ext}=0$ i $I_{ext}=10$ nasze rozwiązania zbiegają do stanu stacjonarnego. Zaś dla $I_{ext}=5$ rozwiązanie ,,krąży" po pewnej orbicie wokół stanu stacjonarnego. Warto zwrócić uwagę na fakt, że część trajektorii rozwiązań biegnie podobnie do nullcline-ów zaznaczonych kolorem zielonym, tak jest zwłaszcza dla przypadku gdy $I_{ext}=0$ bądź $I_{ext}=10$. Kiedy następnie spojrzymy na wykresy rozwiązań w zależności od czasu, również w przypadku $I_{ext}=0$ i $I_{ext}=10$ obserwujemy stabilizowanie się rozwiązań wraz ze wzrostem czasu. Dla $I_{ext}=5$ obserwujemy pewną okresowość tych rozwiązań, co na portrecie fazowym mogliśmy dostrzec, dzięki zamknięciu się trajektorii rozwiązania. Stąd wnioskujemy, że najprawdopodobniej stan stacjonarny dla $I_{ext}=0$ i $I_{ext}=10$ jest stabilny, zaś dla $I_{ext}=5$ jest niestabilny. I tak właśnie jest. By to uzasadnić musimy wyznaczyć macierz Jacobiego tego układu. Zatem:
$$J = 
\begin{pmatrix}
1-v^2 & -1 \\
\frac{1}{\tau} & -\frac{b}{\tau} \\
\end{pmatrix}$$
Dodatkowo do wyznaczenia stabilności rozwiązań potrzebujemy znać wyznacznik i ślad tej macierzy.
$$det(J)=-\frac{b}{\tau}+\frac{b}{\tau}v^2+\frac{1}{\tau}, \,\, tr(J)=1-v^2-\frac{b}{\tau}$$
By określić rodzaj i stabilność naszego rozwiązania musimy zbadać czy wyznaczynik macierzy jest mniejszy, czy większy od zera. Jeśli jest mniejszy mamy siodło, czyli stan niestabilny. Jeśli wyznacznik jest większy od zera, to badamy jego relacje z $\frac{tr(J)^2}{4}$ (czy jest większe czy mniejsze), następnie na podstawie znaku śladu określamy stabilność. Mamy zatem:

- dla $I_{ext}=0$: $det(J) \approx 0.1571$, $tr(J) \approx -0.8992$, $\frac{tr(J)^2}{4} \approx 0.2021$, więc mamy    $0<det(J)<\frac{tr(J)^2}{4}$, czyli węzeł stabilny,

- dla $I_{ext}=5$: $det(J) \approx 0.0591$, $tr(J) \approx 0.1214$, $\frac{tr(J)^2}{4} \approx 0.0037$, więc mamy $0<\frac{tr(J)^2}{4}<det(J)$ i $tr(J)>0$, czyli spiralny niestabilny,

- dla $I_{ext}=10$: $det(J) \approx 0.1295$, $tr(J) \approx -0.6114$, $\frac{tr(J)^2}{4} \approx 0.0935$, więc mamy $0<\frac{tr(J)^2}{4}<det(J)$ i $tr(J)<0$, czyli spiralny stabilny.

Więc jak widzimy po powyższej analizie wartość parametru $I_{ext}$ wpływa na rodzaj stanu stacjonarnego i jego stabilność.

# Zadanie 2

Mamy następujący układ równań:

\begin{equation}
\begin{cases}
  x'=\sigma(y-x),  \\
  y'=rx-y-xz, \\
  z'=xy-qz, \\
  x(0)=x_0, y(0)=y_0, z(0)=z_0,
\end{cases}
\end{equation}

gdzie $x := x(t)$ opisuje ruch konwekcyjny, $y := y(t)$ różnicę temperatur w atmosferze, $z := z(t)$ określa rozkład pionowy temperatury w atmosferze, natomiast $\sigma$ jest liczbą Prandtla, $r$ liczbą Rayleigha i $q > 0$ to rozmiar obszaru. Na potrzeby zadania przyjmujemy $(x_0, y_0, z_0) = (1, 1, 1)$ oraz $\sigma = 10$, $r = 28$, $q = \frac{8}{3}$.

## (2.1)

Na początek napiszemy schematy numeryczne (wzory) dla jawnego schematu Eulera oraz metody RK4. Zatem dla JSE mamy:

\begin{equation}
\begin{cases}
  x(t+h)=x(t)+h \sigma(y(t)-x(t)),  \\
  y(t+h)=y(t)+h(rx(t)-y(t)-x(t)z(t)), \\
  z(t+h)=z(t)+h(x(t)y(t)-qz(t)), \\
  x(0)=x_0, y(0)=y_0, z(0)=z_0.
\end{cases}
\end{equation}

gdzie $h$ to ustalony krok czasowy, $t \in [0,T]$, T jest ustalone.

Dla RK4 mamy:

\begin{equation}
\begin{cases}
  x(t+h)=x(t)+\frac{h}{6}(k_1+2k_2+2k_3+k_4),  \\
  y(t+h)=y(t)+\frac{h}{6}(l_1+2l_2+2l_3+l_4), \\
  z(t+h)=z(t)+\frac{h}{6}(n_1+2n_2+2n_3+n_4), \\
  x(0)=x_0, y(0)=y_0, z(0)=z_0.
\end{cases}
\end{equation}

gdzie $h$ to ustalony krok czasowy, $t \in [0,T]$, T jest ustalone oraz


$k_1 = \sigma(y(t)-x(t)),$


$k_2 = \sigma((y(t)+\frac{h}{2}l_1)-(x(t)+\frac{h}{2}k_1)),$

$k_3 = \sigma((y(t)+\frac{h}{2}l_2)-(x(t)+\frac{h}{2}k_2)),$

$k_4 = \sigma((y(t)+h l_3)-(x(t)+h k_3)),$

$l_1=rx(t)-y(t)-x(t)z(t),$

$l_2=r(x(t)+\frac{h}{2}k_1)-(y(t)+\frac{h}{2}l_1)-(x(t)+\frac{h}{2}k_1)(z(t)+\frac{h}{2}n_1),$ 

$l_3=r(x(t)+\frac{h}{2}k_2)-(y(t)+\frac{h}{2}l_2)-(x(t)+\frac{h}{2}k_2)(z(t)+\frac{h}{2}n_2),$

$l_4=r(x(t)+ h k_3)-(y(t)+ h l_3)-(x(t)+ h k_3)(z(t)+ h n_3),$

$n_1=x(t)y(t)-qz(t),$

$n_2=(x(t)+\frac{h}{2}k_1)(y(t)+\frac{h}{2}l_1)-q(z(t)+\frac{h}{2}n_1)$

$n_3=(x(t)+\frac{h}{2}k_2)(y(t)+\frac{h}{2}l_2)-q(z(t)+\frac{h}{2}n_2),$

$n_4=(x(t)+ h k_3)(y(t)+ h l_3)-q(z(t)+ h n_3)$

## (2.3)

Stosujemy schemat RK4 do numerycznego rozwiązania układu Lorenza z podanymi wcześniej parametrami. Nasze rozwiązanie przedstawimy na wykresie trójwymiarowym, by zwizualizować atraktor Lorenza. Dobieramy $T=50$.


```{python}
#|echo: false

T_v = 50
h_v = 0.01
sigma = 10
r = 28
q = 8/3
x_0, y_0, z_0 = 1, 1, 1
start = [x_0, y_0, z_0]


def f1(wsp):
    x, y, z = wsp
    value = np.array([sigma*(y-x), r*x-y-x*z,x*y-q*z])
    return value


dane_do_wyk = point_to_plot(f1, start, h_v, T_v)

theta = np.linspace(0, 3*np.pi, 1000)
phi = np.linspace(0, 2*np.pi, 1000)

axs = plt.figure(figsize=(10,10)).add_subplot(projection="3d")


axs.plot(dane_do_wyk[0,], dane_do_wyk[1,], dane_do_wyk[2,])

# Podpisy osi
axs.set_xlabel('x')
axs.set_ylabel('y')
axs.set_zlabel('z')

axs.set_title('Atraktor Lorenza')

plt.show()
```

W kontekście tego modelu często mówi się o tak zwanym efekcie motyla. Chodzi w nim o bardzo dużą wręcz ekstremalną wrażliwość układu na warunki początkowe, tzn. że jeśli będzie choć drobna różnica w warunkach początkowych prowadzi to do trajektorii, które z czasem bardzo odbiegają od siebie (rozchodzą się). W praktyce oznacza to, że przewidywanie przyszłości staje się niemożliwe po pewnym czasie. Na wykresie widzimy jak z czasem krzywa naszego rozwiązania coraz bardziej się rozchodzi i zatacza coraz to większe łuki, co obrazuje omówione wcześniej zjawisko.

